################################################################################
# Copyright 2014 Jose Ortiz
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

filter {
  if [message] =~ /^#/ {
    drop { }
  }
  else {
    if [type] == "syslog" and "securityonion" in [tags] {
      grok {
        patterns_dir => [ "/etc/logstash/patterns" ] 
        match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{GREEDYDATA:logmsg}' ]
        tag_on_failure => [ "securityonion", "failure" ]
        break_on_match => "false" 
      } #end grok if [type] == "syslog" and "securityonion" in [tags]
      if [logtype] == "sguil_alert" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ 
            "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{TIME:time} %{DATA:pid} Alert Received: %{NUMBER:status} %{NUMBER:priority} %{DATA:classtype} %{DATA:sensor} \{%{TIMESTAMP_ISO8601:timestamp}\} %{NUMBER:del} %{NUMBER:del} \{%{GREEDYDATA:msg}\} %{IPORHOST:srcip} %{IPORHOST:dstip} %{NUMBER:proto} %{NUMBER:sport} %{NUMBER:dport} %{NUMBER:gid} %{NUMBER:sid} %{NUMBER:rev} %{NUMBER:del} %{GREEDYDATA:del}'
          ]
          add_tag => [ "grokked" ]
          overwrite => [ "logtype" ]
          remove_field => [ "pri", "date", "loghost", "logmsg", "pid", "status", "time", "del" ]
          tag_on_failure => [ "failure" ]
        } #end grok if [logtype] == "sguil_alert"
      } else if [logtype] == "bro_conn" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROCONNSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_conn"
      } else if [logtype] == "bro_dhcp" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BRODHCPSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_dhcp"
      } else if [logtype] == "bro_dns" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BRODNSSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_dns"
      } else if [logtype] == "bro_files" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROFILESSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_files"
        if [sha1] == "md5" { drop {} } # get rid of strange records when file rotation occurs
      } else if [logtype] == "bro_ftp" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROFTPSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_ftp"
      } else if [logtype] == "bro_http" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROHTTPSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_http"
      } else if [logtype] == "bro_intel" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROINTELSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_intel"
      } else if [logtype] == "bro_irc" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROIRCSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_irc"
      } else if [logtype] == "bro_notice" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BRONOTICESO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_notice"
      } else if [logtype] == "bro_smtp" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROSMTPSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_smtp"
      } else if [logtype] == "bro_software" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROSOFTWARESO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_software"
      } else if [logtype] == "bro_ssh" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROSSHSO}' ]
          add_tag => [ "grokked" ]
          remove_field => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_ssh"
      } else if [logtype] == "bro_ssl" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROSSLSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_ssl"
      } else if [logtype] == "bro_syslog" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROSYSLOGSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_syslog"
      } else if [logtype] == "bro_tunnel" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROTUNNELSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_tunnel"
      } else if [logtype] == "bro_weird" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROWEIRDSO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_weird"
      } else if [logtype] == "bro_x509" {
        grok {
          patterns_dir => [ "/etc/logstash/patterns" ] 
          match => [ "message", '\<%{NUMBER:pri}\>%{BSDDATE:date} %{DATA:loghost} %{DATA:logtype}: %{BROX509SO}' ]
          add_tag => [ "grokked" ]
          overwrite => [ "pri", "date", "loghost", "logtype" ]
          remove_field => [ "loghost", "message", "pri", "uid" ]
          tag_on_failure => [ "failure" ]
        } #end grok else if [logtype] == "bro_x509"
      } else {
        drop { }
      } #end if [logtype] == "sguil_alert"
    } #end if [type] == "syslog" and "securityonion" in [tags]
  } #end if [message] =~ /^#/ 
} #end filter

